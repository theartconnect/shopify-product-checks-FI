name: Shopify Product Checks (cron + run window + frequency)

on:
  schedule:
    - cron: "*/5 * * * *"   # base tick (UTC)
  workflow_dispatch: {}      # manual run for testing
  push:
    paths:
      - ".github/workflows/shopify-checks.yml"  # run when this file changes

permissions:
  contents: read

concurrency:
  group: shopify-product-checks
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 55

    steps:
      - name: Show trigger info & time
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "ref=${{ github.ref }}"
          echo "sha=${{ github.sha }}"
          echo "UTC now: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "IST now:  $(TZ=Asia/Kolkata date '+%Y-%m-%d %H:%M:%S')"

      - name: Check out repo
        uses: actions/checkout@v4

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      # ===== HARD VALIDATION (no hidden defaults) =====
      - name: Validate required Secrets/Variables
        env:
          S_SHOPIFY_STORE_DOMAIN: ${{ secrets.SHOPIFY_STORE_DOMAIN }}
          S_SHOPIFY_ADMIN_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ADMIN_ACCESS_TOKEN }}
          S_SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          S_SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

          V_RUN_START_IST: ${{ vars.RUN_START_IST }}
          V_RUN_END_IST: ${{ vars.RUN_END_IST }}
          V_FREQUENCY_MINUTES: ${{ vars.FREQUENCY_MINUTES }}
          V_SHOPIFY_API_VERSION: ${{ vars.SHOPIFY_API_VERSION }}

          V_INDIA_CATALOG_ID: ${{ vars.INDIA_CATALOG_ID }}
          V_INDIA_CATALOG_GID: ${{ vars.INDIA_CATALOG_GID }}
          V_INDIA_CATALOG: ${{ vars.INDIA_CATALOG }}
        run: |
          err=0

          # Required Secrets
          [ -n "$S_SHOPIFY_STORE_DOMAIN" ] || { echo "❌ Missing secret: SHOPIFY_STORE_DOMAIN"; err=1; }
          [ -n "$S_SHOPIFY_ADMIN_ACCESS_TOKEN" ] || { echo "❌ Missing secret: SHOPIFY_ADMIN_ACCESS_TOKEN"; err=1; }
          [ -n "$S_SLACK_BOT_TOKEN" ] || { echo "❌ Missing secret: SLACK_BOT_TOKEN"; err=1; }
          [ -n "$S_SLACK_CHANNEL_ID" ] || { echo "❌ Missing secret: SLACK_CHANNEL_ID"; err=1; }

          # Required Variables
          is_int_0_23 () { case "$1" in (""|*[!0-9]* ) return 1;; (*) [ "$1" -ge 0 ] && [ "$1" -le 23 ];; esac; }
          is_pos_int () { case "$1" in (""|*[!0-9]*|0) return 1;; (*) return 0;; esac; }

          is_int_0_23 "$V_RUN_START_IST" || { echo "❌ RUN_START_IST must be an integer 0–23 (Variables)"; err=1; }
          is_int_0_23 "$V_RUN_END_IST"   || { echo "❌ RUN_END_IST must be an integer 0–23 (Variables)"; err=1; }
          is_pos_int "$V_FREQUENCY_MINUTES" || { echo "❌ FREQUENCY_MINUTES must be a positive integer (Variables)"; err=1; }
          [ -n "$V_SHOPIFY_API_VERSION" ] || { echo "❌ SHOPIFY_API_VERSION must be set in Variables (e.g., 2025-07)"; err=1; }

          # Optional India catalog identifiers (your code can search by title if none provided)
          if [ -z "$V_INDIA_CATALOG_ID$V_INDIA_CATALOG_GID$V_INDIA_CATALOG" ]; then
            echo "ℹ️ No INDIA_CATALOG_* variable set; code will search for catalog titled 'India'."
          fi

          exit $err

      # ===== Running window (IST) + frequency gate (UTC minute-of-hour) =====
      - name: Running window & frequency gate
        id: gate
        env:
          RUN_START_IST: ${{ vars.RUN_START_IST }}
          RUN_END_IST: ${{ vars.RUN_END_IST }}
          FREQUENCY_MINUTES: ${{ vars.FREQUENCY_MINUTES }}
        shell: bash
        run: |
          set -e
          echo "RUN_START_IST=$RUN_START_IST"
          echo "RUN_END_IST=$RUN_END_IST"
          echo "FREQUENCY_MINUTES=$FREQUENCY_MINUTES"

          # 1) Running time window (IST)
          IST_HOUR=$(TZ=Asia/Kolkata date +%H)
          echo "Current IST hour=$IST_HOUR"

          IN_WINDOW=0
          if [ "$RUN_START_IST" -le "$RUN_END_IST" ]; then
            # Same-day window [start, end)
            if [ "$IST_HOUR" -ge "$RUN_START_IST" ] && [ "$IST_HOUR" -lt "$RUN_END_IST" ]; then IN_WINDOW=1; fi
          else
            # Overnight window (e.g., 22 → 06)
            if [ "$IST_HOUR" -ge "$RUN_START_IST" ] || [ "$IST_HOUR" -lt "$RUN_END_IST" ]; then IN_WINDOW=1; fi
          fi

          if [ "$IN_WINDOW" -ne 1 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "⏸️  Skip: outside Running Time window."
            exit 0
          fi

          # 2) Frequency gate using UTC minute-of-hour (aligns with cron minute)
          UTC_MINUTE=$(date -u +%M)
          echo "UTC minute-of-hour=$UTC_MINUTE"
          if [ $(( 10#$UTC_MINUTE % FREQUENCY_MINUTES )) -ne 0 ]; then
            echo "should_run=false" >> $GITHUB_OUTPUT
            echo "⏸️  Skip: minute $UTC_MINUTE not on $FREQUENCY_MINUTES-minute boundary."
            exit 0
          fi

          echo "should_run=true" >> $GITHUB_OUTPUT
          echo "✅ Gates passed."

      # ===== Runtime .env for your script =====
      - name: Create runtime .env from GitHub Secrets/Variables
        if: steps.gate.outputs.should_run == 'true'
        run: |
          cat > .env <<'EOF'
          SHOPIFY_STORE_DOMAIN=${{ secrets.SHOPIFY_STORE_DOMAIN }}
          SHOPIFY_ADMIN_ACCESS_TOKEN=${{ secrets.SHOPIFY_ADMIN_ACCESS_TOKEN }}
          SHOPIFY_API_VERSION=${{ vars.SHOPIFY_API_VERSION }}
          SLACK_BOT_TOKEN=${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID=${{ secrets.SLACK_CHANNEL_ID }}
          DRY_RUN=${{ vars.DRY_RUN }}
          SHOPIFY_LOG_GRAPHQL_COSTS=${{ vars.SHOPIFY_LOG_GRAPHQL_COSTS }}
          INDIA_CATALOG_ID=${{ vars.INDIA_CATALOG_ID }}
          INDIA_CATALOG_GID=${{ vars.INDIA_CATALOG_GID }}
          INDIA_CATALOG=${{ vars.INDIA_CATALOG }}
          EOF
          echo "Wrote .env"

      - name: Show .env (redacted)
        if: steps.gate.outputs.should_run == 'true'
        run: |
          echo "SHOPIFY_STORE_DOMAIN=$(grep SHOPIFY_STORE_DOMAIN .env | cut -d= -f2-)"
          echo "SHOPIFY_API_VERSION=$(grep SHOPIFY_API_VERSION .env | cut -d= -f2-)"
          echo "DRY_RUN=$(grep DRY_RUN .env | cut -d= -f2-)"
          echo "SHOPIFY_LOG_GRAPHQL_COSTS=$(grep SHOPIFY_LOG_GRAPHQL_COSTS .env | cut -d= -f2-)"

      - name: Sanity check Shopify credentials (shop.name)
        if: steps.gate.outputs.should_run == 'true'
        shell: bash
        run: |
          set -e
          DOMAIN=$(grep SHOPIFY_STORE_DOMAIN .env | cut -d= -f2-)
          TOKEN=$(grep SHOPIFY_ADMIN_ACCESS_TOKEN .env | cut -d= -f2-)
          APIV=$(grep SHOPIFY_API_VERSION .env | cut -d= -f2-)
          echo "Pinging https://$DOMAIN/admin/api/${APIV}/graphql.json ..."
          RESP=$(curl -sS -X POST "https://$DOMAIN/admin/api/$APIV/graphql.json" \
            -H "X-Shopify-Access-Token: $TOKEN" -H "Content-Type: application/json" \
            --data '{"query":"{ shop { name } }"}')
          echo "Response: $RESP"
          echo "$RESP" | grep -q '"shop"' || { echo "❌ Shopify ping failed; check domain/token/scopes/API version"; exit 1; }

      - name: Install deps (npm ci)
        if: steps.gate.outputs.should_run == 'true'
        run: npm ci --no-audit --no-fund

      - name: Run script
        if: steps.gate.outputs.should_run == 'true'
        env:
          NODE_OPTIONS: --unhandled-rejections=strict
        run: node index.js
